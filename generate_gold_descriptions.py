#!/usr/bin/env python3
"""
Test script to generate intelligent column descriptions for gold schema tables.

This script:
1. Seeds the definitions table (if not already seeded)
2. Generates intelligent descriptions for gold schema columns
3. Shows the results

Usage:
    python generate_gold_descriptions.py
"""

import sys
import os

# Add kimball to path
sys.path.insert(0, os.path.dirname(__file__))

from kimball.model.definitions_manager import DefinitionsManager
from kimball.core.database import DatabaseManager
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def main():
    """Main function to generate gold descriptions."""
    print("=" * 80)
    print("Gold Schema Column Description Generator")
    print("=" * 80)
    print()
    
    # Initialize definitions manager
    definitions_manager = DefinitionsManager()
    db_manager = DatabaseManager()
    
    # Step 1: Check if definitions table exists, create if needed
    print("Step 1: Creating definitions table (if needed)...")
    try:
        definitions_manager.create_definitions_table()
        print("✓ Definitions table created/verified")
    except Exception as e:
        print(f"✗ Error creating definitions table: {e}")
        return
    
    print()
    
    # Step 2: Check if definitions are seeded for gold schema
    print("Step 2: Checking if definitions are seeded for gold schema...")
    try:
        check_query = """
        SELECT COUNT(*) as count
        FROM metadata.definitions
        WHERE schema_name = 'gold'
        """
        result = db_manager.execute_query_dict(check_query)
        gold_count = result[0]['count'] if result else 0
        
        if gold_count == 0:
            print(f"⚠ No gold schema definitions found ({gold_count} columns)")
            print("  Seeding all schemas first...")
            
            seed_result = definitions_manager.seed_definitions_from_schemas(['bronze', 'silver', 'gold'])
            if seed_result['status'] == 'success':
                print(f"✓ Seeded definitions: {seed_result['total_tables']} tables, {seed_result['total_columns']} columns")
            else:
                print(f"✗ Error seeding definitions: {seed_result['message']}")
                return
        else:
            print(f"✓ Found {gold_count} gold schema definitions")
    except Exception as e:
        print(f"✗ Error checking definitions: {e}")
        return
    
    print()
    
    # Step 3: Generate descriptions for gold schema
    print("Step 3: Generating intelligent descriptions for gold schema columns...")
    try:
        result = definitions_manager.generate_gold_descriptions()
        
        if result['status'] == 'success':
            descriptions_generated = result['descriptions_generated']
            table_descriptions = result.get('table_descriptions', {})
            
            print(f"✓ Generated {descriptions_generated} column descriptions")
            print()
            
            if table_descriptions:
                print("Descriptions generated by table:")
                for table_name, count in sorted(table_descriptions.items()):
                    print(f"  - {table_name}: {count} descriptions")
            print()
        else:
            print(f"✗ Error generating descriptions: {result['message']}")
            return
    except Exception as e:
        print(f"✗ Error generating descriptions: {e}")
        import traceback
        traceback.print_exc()
        return
    
    print()
    
    # Step 4: Show sample of generated descriptions
    print("Step 4: Sample of generated descriptions...")
    try:
        sample_query = """
        SELECT 
            table_name,
            column_name,
            column_type,
            column_description
        FROM metadata.definitions
        WHERE schema_name = 'gold'
        AND column_description != ''
        ORDER BY table_name, column_name
        LIMIT 20
        """
        samples = db_manager.execute_query_dict(sample_query)
        
        if samples:
            print()
            current_table = None
            for sample in samples:
                if sample['table_name'] != current_table:
                    current_table = sample['table_name']
                    print(f"\n{current_table}:")
                    print("-" * 80)
                
                print(f"  {sample['column_name']} ({sample['column_type']})")
                print(f"    {sample['column_description']}")
        else:
            print("  No descriptions found")
    except Exception as e:
        print(f"✗ Error showing samples: {e}")
    
    print()
    print("=" * 80)
    print("Done!")
    print("=" * 80)


if __name__ == "__main__":
    main()

